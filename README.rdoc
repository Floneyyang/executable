= Executable

{Website}[http://rubyworks.github.com/executable] |
{Source Code}[http://github.com/rubyworrks/executable] |
{Report Issue}[http://github.com/rubyworrks/executable/features] |
{#rubyworks}[irc://irc.freenode.org/rubyworks]

{<img src="http://travis-ci.org/rubyworks/executable.png" />}[http://travis-ci.org/rubyworks/executable]


== DESCRIPTION

Think of Executable as a *COM*, a Commandline Object Mapper,
in much the same way that ActiveRecord is an ORM,
an Object Relational Mapper. A class utilizing Executable
can define a complete command line tool using nothing more
than Ruby's own method definitions.

Executable is a very striaght-forward CLI framework for Ruby. CLI::Base is
a *COM* --a Command-to-Object Mapping library. A command line tool can be defined
using nothing more than Ruby's own standard syntax. No special DSL is required. 


== FEATURES

* Super easy to use, just mixin.
* Public writers become options.
* Public methods become subcommands.


== RELEASE NOTES

Please see HISTORY file.


== SYNOPSIS

Executable can be use as a mixin, or as a subclass via `Executable::Base`.
Add methods to you class to handle command-line options. Writer methods 
(those ending in '=') coorepsond to an options and a query method (those
ending in '?') mark an attribute as a flag option. 

For example, here is a simple commandline tool to run a Ruby script.

    require 'executable'

    class RunCLI < Executable::Base
      # Require LIBRARY before executing your script.
      def require=(lib)
        require lib
      end
      alias :r= :require=

      # Include PATH in $LOAD_PATH.
      def include=(path)
        $:.unshift path
      end
      alias :I= :incude

      # Run in DEBUG mode.
      def debug?
        $DEBUG = true
      end

      # Show this message.
      def help?
        puts self
        exit
      end
      alias :h? :help?

      # Run the command.
      def main(script)
        load(script)
      end
    end

    Example.execute!("foo.rb")

== SYNOPSIS

Simply mixin Executable, then call #execute_command.

  class Example
    include Executable

    attr_accessor :quiet

    attr_accessor :size

    def bread(*args)
      ["bread", quiet, size, *args]
    end

    def butter(*args)
      ["butter", quiet, size, *args]
    end
  end

  example = Example.new

  example.execute!("butter yum")
  => ["butter", nil, nil, "yum"]

  example.execute!("bread --quiet --size=big")
  => ["bread", true, "big"]

Notice that Executable requires an equal-sign (<code>=</code>) be used
when specifying values for non-boolean attributes.

To make the command available on the command line, add an executable
to your project passing ARGV to the #execute! method.

  #!usr/bin/env ruby
  require 'example'
  example = Example.new
  example.execute!(ARGV)

For a more detail example see DEMO.rdoc.


== INSTALL

Install with RubyGems in the usual fashion.

  $ gem install executable


== LEGAL

Copyright (c) 2008 Rubyworks

Distributable in accordance with the *BSD-2-Clause* license.

See COPYING.rdoc for licensing details.

